---
# Preamble

## Author
author:
  name: Мишина Анастасия Алексеевна
  orcid: 0009-0002-6246-7100
  email: 1132226532@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6
## Title
title: "Отчет по лабораторной работе №4"
subtitle: "Дисциплина: Моделирование сетей передачи данных"
## Generic options
lang: ru-RU
number-sections: true
toc: true
toc-title: "Содержание"
toc-depth: 2
## Crossref customization
crossref:
  lof-title: "Список иллюстраций"
  lot-title: "Список таблиц"
  lol-title: "Листинги"
## Bibliography
bibliography:
  - bib/cite.bib
csl: _resources/csl/gost-r-7-0-5-2008-numeric.csl
## Formats
format:
### Pdf output format
  pdf:
    toc: true
    number-sections: true
    colorlinks: false
    toc-depth: 2
    lof: true # List of figures
    lot: true # List of tables
#### Document
    documentclass: scrreprt
    papersize: a4
    fontsize: 12pt
    linestretch: 1.5
#### Language
    babel-lang: russian
    babel-otherlangs: english
#### Biblatex
    cite-method: biblatex
    biblio-style: gost-numeric
    biblatexoptions:
      - backend=biber
      - langhook=extras
      - autolang=other*
#### Misc options
    csquotes: true
    indent: true
    header-includes: |
      \usepackage{indentfirst}
      \usepackage{float}
      \floatplacement{figure}{H}
      \usepackage[math,RM={Scale=0.94},SS={Scale=0.94},SScon={Scale=0.94},TT={Scale=MatchLowercase,FakeStretch=0.9},DefaultFeatures={Ligatures=Common}]{plex-otf}
### Docx output format
  docx:
    toc: true
    number-sections: true
    toc-depth: 2
---

# Цель работы

Основной целью работы является знакомство с NETEM — инструментом для тестирования производительности приложений в виртуальной сети, а также получение навыков проведения интерактивного и воспроизводимого экспериментов по измерению задержки и её дрожания (jitter) в моделируемой сети в среде Mininet.

# Задание

1. Задайте простейшую топологию, состоящую из двух хостов и коммутатора с назначенной по умолчанию mininet сетью 10.0.0.0/8.
2. Проведите интерактивные эксперименты по добавлению/изменению задержки, джиттера, значения корреляции для джиттера и задержки, распределения времени задержки в эмулируемой глобальной сети.
3. Реализуйте воспроизводимый эксперимент по заданию значения задержки в эмулируемой глобальной сети. Постройте график.
4. Самостоятельно реализуйте воспроизводимые эксперименты по изменению задержки, джиттера, значения корреляции для джиттера и задержки, распределения времени задержки в эмулируемой глобальной сети. Постройте графики.

# Теоретическое введение

Mininet[@mininet] -- это эмулятор компьютерной сети. Под компьютерной сетью подразумеваются простые компьютеры — хосты, коммутаторы, а так же OpenFlow-контроллеры. С помощью простейшего синтаксиса в примитивном интерпретаторе команд можно разворачивать сети из произвольного количества хостов, коммутаторов в различных топологиях и все это в рамках одной виртуальной машины(ВМ). На всех хостах можно изменять сетевую конфигурацию, пользоваться стандартными утилитами(ifconfig, ping) и даже получать доступ к терминалу. На коммутаторы можно добавлять различные правила и маршрутизировать трафик.

# Выполнение лабораторной работы

## Запуск лабораторной топологии

Запустим виртуальную среду с mininet. Из основной ОС подключимся к виртуальной машине. В виртуальной машине mininet при необходимости исправим права запуска X-соединения. Скопируем значение куки (MIT magic cookie) своего пользователя mininet в файл для пользователя root ([рис. @fig-001]).

![Исправление прав запуска X-соединения](image/1.png){#fig-001 width=70%}

Зададим простейшую топологию, состоящую из двух хостов и коммутатора с назначенной по умолчанию mininet сетью 10.0.0.0/8 ([рис. @fig-002]).

![Простейшая топология](image/2.png){#fig-002 width=70%} 

На хостах h1 и h2 введем команду ifconfig, чтобы отобразить информацию, относящуюся к их сетевым интерфейсам и назначенным им IP-адресам. В дальнейшем при работе с NETEM и командой tc будут использоваться интерфейсы h1-eth0 и h2-eth0 ([рис. @fig-003]).

![ifconfig на хостах h1 и h2](image/3.png){#fig-003 width=70%} 

Проверим подключение между хостами h1 и h2 с помощью команды ping с параметром -c 6 ([рис. @fig-004]).

![Проверка подключения между хостами](image/4.png){#fig-004 width=70%}

## Интерактивные эксперименты

### Добавление/изменение задержки в эмулируемой глобальной сети

Сетевые эмуляторы задают задержки на интерфейсе. Например, задержка, вносимая в интерфейс коммутатора A, который подключён к интерфейсу коммутатора B, может представлять собой задержку распространения WAN, соединяющей оба коммутатора.

На хосте h1 добавим задержку в 100 мс к выходному интерфейсу.

`sudo tc qdisc add dev h1-eth0 root netem delay 100ms`

- sudo: выполнить команду с более высокими привилегиями;
- tc: вызвать управление трафиком Linux;
- qdisc: изменить дисциплину очередей сетевого планировщика;
- add: создать новое правило;
- dev h1-eth0: указать интерфейс, на котором будет применяться правило;
- netem: использовать эмулятор сети;
- delay 100ms: задержка ввода 100 мс.

Проверим, что соединение от хоста h1 к хосту h2 имеет задержку 100 мс, используя команду ping с параметром -c 6 с хоста h1 ([рис. @fig-005]). Минимальное - (100.467), среднее - (101.597), максимальное - (102.384), стандартное отклонение времени (0.656) приема-передачи.

![Добавление задержки в 100мс](image/5.png){#fig-005 width=70%}

Для эмуляции глобальной сети с двунаправленной задержкой необходимо к соответствующему интерфейсу на хосте h2 также добавим задержку в 100 миллисекунд ([рис. @fig-006]).

Проверим, что соединение между хостом h1 и хостом h2 имеет RTT в 200 мс (100 мс от хоста h1 к хосту h2 и 100 мс от хоста h2 к хосту h1), повторив команду ping с параметром -c 6 на терминале хоста h1. Минимальное - (202.068), среднее - (202.884), максимальное - (204.777), стандартное отклонение времени (0.943) приема-передачи.

![Двунаправленная задержка соединения](image/6.png){#fig-006 width=70%}

### Изменение задержки в эмулируемой глобальной сети

Изменим задержку со 100 мс до 50 мс для отправителя h1 и для получателя h2 ([рис. @fig-007]).

Проверим, что соединение от хоста h1 к хосту h2 имеет задержку 100 мс, используя команду ping с параметром -c 6 с терминала хоста h1. Минимальное - (101.050), среднее - (101.253), максимальное - (108.223), стандартное отклонение времени (2.475) приема-передачи.

![Изменение задержки на 50мс](image/7.png){#fig-007 width=70%}

### Восстановление исходных значений (удаление правил) задержки в эмулируемой глобальной сети

Восстановим конфигурацию по умолчанию, удалив все правила, применённые к сетевому планировщику соответствующего интерфейса. Для отправителя h1: `sudo tc qdisc del dev h1-eth0 root netem`. Для получателя h2: `sudo tc qdisc del dev h2-eth0 root netem`. Проверим, что соединение между хостом h1 и хостом h2 не имеет явно установленной задержки, используя команду ping с параметром -c 6 с терминала хоста h1. Минимальное - (0.145), среднее - (1.256), максимальное - (4.875), стандартное отклонение времени (1.655) приема-передачи ([рис. @fig-008]).

![Восстановление исходных значений задержки](image/8.png){#fig-008 width=70%}

### Добавление значения дрожания задержки в интерфейс подключения к эмулируемой глобальной сети

Добавим на узле h1 задержку в 100 мс со случайным отклонением 10 мс. Проверим, что соединение от хоста h1 к хосту h2 имеет задержку 100 мс со случайным отклонением ±10 мс, используя в терминале хоста h1 команду ping с параметром -c 6. Восстановим конфигурацию интерфейса по умолчанию на узле h1. Минимальное - (91.961), среднее - (99.758), максимальное - (106.319), стандартное отклонение времени (5.130) приема-передачи ([рис. @fig-009]).

![Добавление значения дрожания задержки в интерфейс подключения](image/9.png){#fig-009 width=70%}

### Добавление значения корреляции для джиттера и задержки в интерфейс подключения к эмулируемой глобальной сети

Добавим на интерфейсе хоста h1 задержку в 100 мс с вариацией ±10 мс и значением корреляции в 25%. Убедимся, что все пакеты, покидающие устройство h1 на интерфейсе h1-eth0, будут иметь время задержки 100 мс со случайным отклонением ±10 мс, при этом время передачи следующего пакета зависит от предыдущего значения на 25%. Используем для этого в терминале хоста h1 команду ping с параметром -c 20. Восстановим конфигурацию интерфейса по умолчанию на узле h1. Минимальное - (91.887), среднее - (102.565), максимальное - (111.050), стандартное отклонение времени (5.730) приема-передачи ([рис. @fig-010]).

![Добавление значения корреляции для джиттера и задержки в интерфейс подключения](image/10.png){#fig-010 width=70%}

### Распределение задержки в интерфейсе подключения к эмулируемой глобальной сети

Зададим нормальное распределение задержки на узле h1 в эмулируемой сети. Убедимся, что все пакеты, покидающие хост h1 на интерфейсе h1-eth0, будут иметь время задержки, которое распределено в диапазоне 100 мс ±20 мс. Используем для этого команду ping на терминале хоста h1 с параметром -c 10. Восстановим конфигурацию интерфейса по умолчанию на узле h1. Минимальное - (74.585), среднее - (105.367), максимальное - (126.328), стандартное отклонение времени (16.340) приема-передачи. Завершим работу mininet в интерактивном режиме ([рис. @fig-011]).

![Распределение задержки в интерфейсе подключения](image/11.png){#fig-011 width=70%}

## Воспроизведение экспериментов

### Предварительная подготовка

Обновим репозитории программного обеспечения на виртуальной машине: `sudo apt-get update`. Установим пакет geeqie — понадобится для просмотра файлов png: `sudo apt install geeqie`.

Для каждого воспроизводимого эксперимента expname создадим свой каталог, в котором будут размещаться файлы эксперимента: `mkdir -p ~/work/lab_netem_i/expname`. Здесь expname может принимать значения simple-delay, change-delay,
jitter-delay, correlation-delay и т.п. Для каждого случая создадим скрипт для проведения эксперимента lab_netem_i.py и скрипт для визуализации результатов ping_plot.

### Добавление задержки для интерфейса, подключающегося к эмулируемой глобальной сети

С помощью API Mininet воспроизведем эксперимент по добавлению задержки для интерфейса хоста, подключающегося к эмулируемой глобальной сети.

В виртуальной среде mininet в своём рабочем каталоге с проектами создадим каталог simple-delay и перейдем в него.

```
mkdir -p ~/work/lab_netem_i/simple-delay
cd ~/work/lab_netem_i/simple-delay
```

Создадим скрипт для эксперимента lab_netem_i.py.

```
#!/usr/bin/env python

"""
Simple experiment.
Output: ping.dat
"""

from mininet.net import Mininet
from mininet.node import Controller
from mininet.cli import CLI

from mininet.log import setLogLevel, info
import time

def emptyNet():

  "Create an empty network and add nodes to it."

  net = Mininet( controller=Controller, waitConnected=True )

  info( '*** Adding controller\n' )
  net.addController( 'c0' )

  info( '*** Adding hosts\n' )
  h1 = net.addHost( 'h1', ip='10.0.0.1' )
  h2 = net.addHost( 'h2', ip='10.0.0.2' )

  info( '*** Adding switch\n' )
  s1 = net.addSwitch( 's1' )

  info( '*** Creating links\n' )
  net.addLink( h1, s1 )
  net.addLink( h2, s1 )

  info( '*** Starting network\n')
  net.start()

  info( '*** Set delay\n')
  h1.cmdPrint( 'tc qdisc add dev h1-eth0 root netem delay 100ms' )
  h2.cmdPrint( 'tc qdisc add dev h2-eth0 root netem delay 100ms' )

  time.sleep(10) # Wait 10 seconds

  info( '*** Ping\n')
  h1.cmdPrint( 'ping -c 100', h2.IP(), '| grep "time=" | awk \'{print $5, $7}\' | sed -e \'s/time=//g\' -e \'s/icmp_seq=//g\' > ping.dat' )

  info( '*** Stopping network' )
  net.stop()

if __name__ == '__main__':
  setLogLevel( 'info' )
  emptyNet()
```

Создадим скрипт для визуализации ping_plot результатов эксперимента ([рис. @fig-012]).

![Скрипт для визуализации ping_plot](image/12.png){#fig-012 width=70%}

Зададим права доступа к файлу скрипта: `chmod +x ping_plot` ([рис. @fig-013]).

![Создание каталогов, права к файлу скрипта](image/13.png){#fig-013 width=70%}

Создадим Makefile для управления процессом проведения эксперимента ([рис. @fig-014]).

![Makefile для управления процессом проведения эксперимента](image/14.png){#fig-014 width=70%}

Выполним эксперимент. Продемонстрируем построенный в результате выполнения скриптов график ([рис. @fig-015]).

![Результат выполнения скрипта](image/15.png){#fig-015 width=70%}

Из файла ping.dat удалим первую строку и заново постройте график. Продемонстрируем построенный в результате график ([рис. @fig-016]).

![Результат выполнения скрипта](image/16.png){#fig-016 width=70%}

Разработаем скрипт для вычисления на основе данных файла ping.dat минимального, среднего, максимального и стандартного отклонения времени приёма-передачи ([рис. @fig-017]).

![Cкрипт rtt.py](image/17.png){#fig-017 width=70%}

Продемонстрируем работу скрипта с выводом значений на экран ([рис. @fig-018]).

![Результат работы скрипта rtt.py](image/18.png){#fig-018 width=70%}

Добавим правило запуска скрипта в Makefile ([рис. @fig-019]).

![Добавление правила запуска скрипта в Makefile](image/19.png){#fig-019 width=70%}

### Задание для самостоятельной работы

Реализуем воспроизводимые эксперименты по изменению задержки, джиттера, значения корреляции для джиттера и задержки, распределения времени задержки в эмулируемой глобальной сети. Создадим каталоги change-delay, jitter-delay, correlation-delay, distribution-delay. Скопируем скрипты, в скрипте топологии изменим строчки в зависимости от задачи. Построим графики. Вычислим минимальное, среднее, максимальное и стандартное отклонение времени приёма-передачи для каждого случая.

- change-delay ([рис. @fig-020]), ([рис. @fig-021]), ([рис. @fig-022]).

![Исправление скрипта lab_netem_i.py](image/20.png){#fig-020 width=70%}

![Просмотр графика ping.png](image/21.png){#fig-021 width=70%}

![Просмотр минимального, среднего, максимального и стандартного отклонения времени приёма-передачи](image/22.png){#fig-022 width=70%}

- jitter-delay ([рис. @fig-023]), ([рис. @fig-024]), ([рис. @fig-025]).

![Исправление скрипта lab_netem_i.py](image/23.png){#fig-023 width=70%}

![Просмотр графика ping.png](image/24.png){#fig-024 width=70%}

![Просмотр минимального, среднего, максимального и стандартного отклонения времени приёма-передачи](image/25.png){#fig-025 width=70%}

- correlation-delay ([рис. @fig-026]), ([рис. @fig-027]), ([рис. @fig-028]).

![Исправление скрипта lab_netem_i.py](image/26.png){#fig-026 width=70%}

![Просмотр графика ping.png](image/27.png){#fig-027 width=70%}

![Просмотр минимального, среднего, максимального и стандартного отклонения времени приёма-передачи](image/28.png){#fig-028 width=70%}

- distribution-delay ([рис. @fig-029]), ([рис. @fig-030]), ([рис. @fig-031]).

![Исправление скрипта lab_netem_i.py](image/29.png){#fig-029 width=70%}

![Просмотр графика ping.png](image/30.png){#fig-030 width=70%}

![Просмотр минимального, среднего, максимального и стандартного отклонения времени приёма-передачи](image/31.png){#fig-031 width=70%}

# Выводы

В результате выполнения данной лабораторной работы я познакомилась с NETEM -- инструментом для тестирования производительности приложений в виртуальной сети, а также получила навыки проведения интерактивного и воспроизводимого экспериментов по измерению задержки и её дрожания (jitter) в моделируемой сети в среде Mininet.

# Список литературы{.unnumbered}

::: {#refs}
:::